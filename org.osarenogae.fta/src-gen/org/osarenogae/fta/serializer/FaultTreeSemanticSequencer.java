/*
 * generated by Xtext 2.25.0
 */
package org.osarenogae.fta.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.osarenogae.fta.faultTree.BasicEvent;
import org.osarenogae.fta.faultTree.ConditionalEvent;
import org.osarenogae.fta.faultTree.ExternalEvent;
import org.osarenogae.fta.faultTree.FaultTreeModel;
import org.osarenogae.fta.faultTree.FaultTreePackage;
import org.osarenogae.fta.faultTree.IntermediateEvent;
import org.osarenogae.fta.faultTree.IntermediateEventDefinition;
import org.osarenogae.fta.faultTree.Tree;
import org.osarenogae.fta.faultTree.begin;
import org.osarenogae.fta.services.FaultTreeGrammarAccess;

@SuppressWarnings("all")
public class FaultTreeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private FaultTreeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == FaultTreePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case FaultTreePackage.BASIC_EVENT:
				sequence_BasicEvent(context, (BasicEvent) semanticObject); 
				return; 
			case FaultTreePackage.CONDITIONAL_EVENT:
				sequence_ConditionalEvent(context, (ConditionalEvent) semanticObject); 
				return; 
			case FaultTreePackage.EXTERNAL_EVENT:
				sequence_ExternalEvent(context, (ExternalEvent) semanticObject); 
				return; 
			case FaultTreePackage.FAULT_TREE_MODEL:
				sequence_FaultTreeModel(context, (FaultTreeModel) semanticObject); 
				return; 
			case FaultTreePackage.INTERMEDIATE_EVENT:
				sequence_IntermediateEvent(context, (IntermediateEvent) semanticObject); 
				return; 
			case FaultTreePackage.INTERMEDIATE_EVENT_DEFINITION:
				if (rule == grammarAccess.getIntermediateEventDefinitionRule()) {
					sequence_IntermediateEventDefinition(context, (IntermediateEventDefinition) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getBeginRule()) {
					sequence_IntermediateEventDefinition_begin(context, (IntermediateEventDefinition) semanticObject); 
					return; 
				}
				else break;
			case FaultTreePackage.TREE:
				if (rule == grammarAccess.getTreeRule()) {
					sequence_AndGate_InhibitGate_OrGate(context, (Tree) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getAndGateRule()) {
					sequence_AndGate(context, (Tree) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getInhibitGateRule()) {
					sequence_InhibitGate(context, (Tree) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getOrGateRule()) {
					sequence_OrGate(context, (Tree) semanticObject); 
					return; 
				}
				else break;
			case FaultTreePackage.BEGIN:
				sequence_begin(context, (begin) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Tree returns Tree
	 *
	 * Constraint:
	 *     ((left=AndGate right=AndGate) | (left=InhibitGate right=InhibitGate) | (left=Event right=ConditionalEvent))
	 */
	protected void sequence_AndGate_InhibitGate_OrGate(ISerializationContext context, Tree semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AndGate returns Tree
	 *
	 * Constraint:
	 *     (left=InhibitGate right=InhibitGate)
	 */
	protected void sequence_AndGate(ISerializationContext context, Tree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__LEFT));
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAndGateAccess().getLeftInhibitGateParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getAndGateAccess().getRightInhibitGateParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns BasicEvent
	 *     Event returns BasicEvent
	 *     BasicEvent returns BasicEvent
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_BasicEvent(ISerializationContext context, BasicEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns ConditionalEvent
	 *     Event returns ConditionalEvent
	 *     ConditionalEvent returns ConditionalEvent
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ConditionalEvent(ISerializationContext context, ConditionalEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns ExternalEvent
	 *     Event returns ExternalEvent
	 *     ExternalEvent returns ExternalEvent
	 *
	 * Constraint:
	 *     (name=ID description=STRING?)
	 */
	protected void sequence_ExternalEvent(ISerializationContext context, ExternalEvent semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     FaultTreeModel returns FaultTreeModel
	 *
	 * Constraint:
	 *     faultTree+=begin
	 */
	protected void sequence_FaultTreeModel(ISerializationContext context, FaultTreeModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     InhibitGate returns Tree
	 *
	 * Constraint:
	 *     (left=Event right=ConditionalEvent)
	 */
	protected void sequence_InhibitGate(ISerializationContext context, Tree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__LEFT));
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInhibitGateAccess().getLeftEventParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getInhibitGateAccess().getRightConditionalEventParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntermediateEventDefinition returns IntermediateEventDefinition
	 *
	 * Constraint:
	 *     (name=[IntermediateEvent|ID] description=STRING? value=Tree)
	 */
	protected void sequence_IntermediateEventDefinition(ISerializationContext context, IntermediateEventDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     begin returns IntermediateEventDefinition
	 *
	 * Constraint:
	 *     (name=[IntermediateEvent|ID] description=STRING? value=Tree fault+=Tree)
	 */
	protected void sequence_IntermediateEventDefinition_begin(ISerializationContext context, IntermediateEventDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tree returns IntermediateEvent
	 *     Event returns IntermediateEvent
	 *     IntermediateEvent returns IntermediateEvent
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_IntermediateEvent(ISerializationContext context, IntermediateEvent semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntermediateEventAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     OrGate returns Tree
	 *
	 * Constraint:
	 *     (left=AndGate right=AndGate)
	 */
	protected void sequence_OrGate(ISerializationContext context, Tree semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__LEFT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__LEFT));
			if (transientValues.isValueTransient(semanticObject, FaultTreePackage.Literals.TREE__RIGHT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, FaultTreePackage.Literals.TREE__RIGHT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getOrGateAccess().getLeftAndGateParserRuleCall_0_0(), semanticObject.getLeft());
		feeder.accept(grammarAccess.getOrGateAccess().getRightAndGateParserRuleCall_2_0(), semanticObject.getRight());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     begin returns begin
	 *
	 * Constraint:
	 *     fault+=Tree
	 */
	protected void sequence_begin(ISerializationContext context, begin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
