/**
 * generated by Xtext 2.25.0
 */
package org.osarenogae.fta.faultTree.util;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

import org.osarenogae.fta.faultTree.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see org.osarenogae.fta.faultTree.FaultTreePackage
 * @generated
 */
public class FaultTreeAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static FaultTreePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FaultTreeAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = FaultTreePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FaultTreeSwitch<Adapter> modelSwitch =
    new FaultTreeSwitch<Adapter>()
    {
      @Override
      public Adapter caseFaultTreeModel(FaultTreeModel object)
      {
        return createFaultTreeModelAdapter();
      }
      @Override
      public Adapter casebegin(begin object)
      {
        return createbeginAdapter();
      }
      @Override
      public Adapter caseIntermediateEventDefinition(IntermediateEventDefinition object)
      {
        return createIntermediateEventDefinitionAdapter();
      }
      @Override
      public Adapter caseTree(Tree object)
      {
        return createTreeAdapter();
      }
      @Override
      public Adapter caseIntermediateEvent(IntermediateEvent object)
      {
        return createIntermediateEventAdapter();
      }
      @Override
      public Adapter caseBasicEvent(BasicEvent object)
      {
        return createBasicEventAdapter();
      }
      @Override
      public Adapter caseConditionalEvent(ConditionalEvent object)
      {
        return createConditionalEventAdapter();
      }
      @Override
      public Adapter caseExternalEvent(ExternalEvent object)
      {
        return createExternalEventAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.FaultTreeModel <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.FaultTreeModel
   * @generated
   */
  public Adapter createFaultTreeModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.begin <em>begin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.begin
   * @generated
   */
  public Adapter createbeginAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.IntermediateEventDefinition <em>Intermediate Event Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.IntermediateEventDefinition
   * @generated
   */
  public Adapter createIntermediateEventDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.Tree <em>Tree</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.Tree
   * @generated
   */
  public Adapter createTreeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.IntermediateEvent <em>Intermediate Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.IntermediateEvent
   * @generated
   */
  public Adapter createIntermediateEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.BasicEvent <em>Basic Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.BasicEvent
   * @generated
   */
  public Adapter createBasicEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.ConditionalEvent <em>Conditional Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.ConditionalEvent
   * @generated
   */
  public Adapter createConditionalEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link org.osarenogae.fta.faultTree.ExternalEvent <em>External Event</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see org.osarenogae.fta.faultTree.ExternalEvent
   * @generated
   */
  public Adapter createExternalEventAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //FaultTreeAdapterFactory
