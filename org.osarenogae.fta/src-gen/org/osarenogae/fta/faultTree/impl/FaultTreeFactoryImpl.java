/**
 * generated by Xtext 2.25.0
 */
package org.osarenogae.fta.faultTree.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.osarenogae.fta.faultTree.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class FaultTreeFactoryImpl extends EFactoryImpl implements FaultTreeFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static FaultTreeFactory init()
  {
    try
    {
      FaultTreeFactory theFaultTreeFactory = (FaultTreeFactory)EPackage.Registry.INSTANCE.getEFactory(FaultTreePackage.eNS_URI);
      if (theFaultTreeFactory != null)
      {
        return theFaultTreeFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new FaultTreeFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public FaultTreeFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case FaultTreePackage.FAULT_TREE_MODEL: return createFaultTreeModel();
      case FaultTreePackage.BEGIN: return createbegin();
      case FaultTreePackage.INTERMEDIATE_EVENT_DEFINITION: return createIntermediateEventDefinition();
      case FaultTreePackage.TREE: return createTree();
      case FaultTreePackage.INTERMEDIATE_EVENT: return createIntermediateEvent();
      case FaultTreePackage.BASIC_EVENT: return createBasicEvent();
      case FaultTreePackage.CONDITIONAL_EVENT: return createConditionalEvent();
      case FaultTreePackage.EXTERNAL_EVENT: return createExternalEvent();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FaultTreeModel createFaultTreeModel()
  {
    FaultTreeModelImpl faultTreeModel = new FaultTreeModelImpl();
    return faultTreeModel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public begin createbegin()
  {
    beginImpl begin = new beginImpl();
    return begin;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntermediateEventDefinition createIntermediateEventDefinition()
  {
    IntermediateEventDefinitionImpl intermediateEventDefinition = new IntermediateEventDefinitionImpl();
    return intermediateEventDefinition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tree createTree()
  {
    TreeImpl tree = new TreeImpl();
    return tree;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntermediateEvent createIntermediateEvent()
  {
    IntermediateEventImpl intermediateEvent = new IntermediateEventImpl();
    return intermediateEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public BasicEvent createBasicEvent()
  {
    BasicEventImpl basicEvent = new BasicEventImpl();
    return basicEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ConditionalEvent createConditionalEvent()
  {
    ConditionalEventImpl conditionalEvent = new ConditionalEventImpl();
    return conditionalEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExternalEvent createExternalEvent()
  {
    ExternalEventImpl externalEvent = new ExternalEventImpl();
    return externalEvent;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FaultTreePackage getFaultTreePackage()
  {
    return (FaultTreePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static FaultTreePackage getPackage()
  {
    return FaultTreePackage.eINSTANCE;
  }

} //FaultTreeFactoryImpl
