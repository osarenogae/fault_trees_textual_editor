/*
 * generated by Xtext 2.25.0
 */
package org.osarenogae.fta.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class FaultTreeGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class FaultTreeModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.FaultTreeModel");
		private final Assignment cFaultTreeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFaultTreeBeginParserRuleCall_0 = (RuleCall)cFaultTreeAssignment.eContents().get(0);
		
		//FaultTreeModel:
		//    faultTree += begin;
		@Override public ParserRule getRule() { return rule; }
		
		//faultTree += begin
		public Assignment getFaultTreeAssignment() { return cFaultTreeAssignment; }
		
		//begin
		public RuleCall getFaultTreeBeginParserRuleCall_0() { return cFaultTreeBeginParserRuleCall_0; }
	}
	public class BeginElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.begin");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIntermediateEventDefinitionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRootKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFaultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFaultTreeParserRuleCall_2_0 = (RuleCall)cFaultAssignment_2.eContents().get(0);
		
		// begin:
		//     (IntermediateEventDefinition)? 'root' fault += Tree
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(IntermediateEventDefinition)? 'root' fault += Tree
		public Group getGroup() { return cGroup; }
		
		//(IntermediateEventDefinition)?
		public RuleCall getIntermediateEventDefinitionParserRuleCall_0() { return cIntermediateEventDefinitionParserRuleCall_0; }
		
		//'root'
		public Keyword getRootKeyword_1() { return cRootKeyword_1; }
		
		//fault += Tree
		public Assignment getFaultAssignment_2() { return cFaultAssignment_2; }
		
		//Tree
		public RuleCall getFaultTreeParserRuleCall_2_0() { return cFaultTreeParserRuleCall_2_0; }
	}
	public class IntermediateEventDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.IntermediateEventDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cNameIntermediateEventCrossReference_0_0 = (CrossReference)cNameAssignment_0.eContents().get(0);
		private final RuleCall cNameIntermediateEventIDTerminalRuleCall_0_0_1 = (RuleCall)cNameIntermediateEventCrossReference_0_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_1_0 = (RuleCall)cDescriptionAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueTreeParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//IntermediateEventDefinition:
		//    name = [IntermediateEvent] (description = STRING)? '=' value = Tree
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = [IntermediateEvent] (description = STRING)? '=' value = Tree
		public Group getGroup() { return cGroup; }
		
		//name = [IntermediateEvent]
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//[IntermediateEvent]
		public CrossReference getNameIntermediateEventCrossReference_0_0() { return cNameIntermediateEventCrossReference_0_0; }
		
		//ID
		public RuleCall getNameIntermediateEventIDTerminalRuleCall_0_0_1() { return cNameIntermediateEventIDTerminalRuleCall_0_0_1; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_1() { return cDescriptionAssignment_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_1_0() { return cDescriptionSTRINGTerminalRuleCall_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value = Tree
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//Tree
		public RuleCall getValueTreeParserRuleCall_3_0() { return cValueTreeParserRuleCall_3_0; }
	}
	public class TreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.Tree");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cOrGateParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAndGateParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInhibitGateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Tree: Event | OrGate | AndGate | InhibitGate;
		@Override public ParserRule getRule() { return rule; }
		
		//Event | OrGate | AndGate | InhibitGate
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Event
		public RuleCall getEventParserRuleCall_0() { return cEventParserRuleCall_0; }
		
		//OrGate
		public RuleCall getOrGateParserRuleCall_1() { return cOrGateParserRuleCall_1; }
		
		//AndGate
		public RuleCall getAndGateParserRuleCall_2() { return cAndGateParserRuleCall_2; }
		
		//InhibitGate
		public RuleCall getInhibitGateParserRuleCall_3() { return cInhibitGateParserRuleCall_3; }
	}
	public class OrGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.OrGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftAndGateParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cOrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightAndGateParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//OrGate returns Tree:
		//    left = AndGate 'or' right = AndGate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left = AndGate 'or' right = AndGate
		public Group getGroup() { return cGroup; }
		
		//left = AndGate
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//AndGate
		public RuleCall getLeftAndGateParserRuleCall_0_0() { return cLeftAndGateParserRuleCall_0_0; }
		
		//'or'
		public Keyword getOrKeyword_1() { return cOrKeyword_1; }
		
		//right = AndGate
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//AndGate
		public RuleCall getRightAndGateParserRuleCall_2_0() { return cRightAndGateParserRuleCall_2_0; }
	}
	public class AndGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.AndGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftInhibitGateParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightInhibitGateParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//AndGate returns Tree:
		//    left = InhibitGate 'and' right = InhibitGate
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left = InhibitGate 'and' right = InhibitGate
		public Group getGroup() { return cGroup; }
		
		//left = InhibitGate
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//InhibitGate
		public RuleCall getLeftInhibitGateParserRuleCall_0_0() { return cLeftInhibitGateParserRuleCall_0_0; }
		
		//'and'
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//right = InhibitGate
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//InhibitGate
		public RuleCall getRightInhibitGateParserRuleCall_2_0() { return cRightInhibitGateParserRuleCall_2_0; }
	}
	public class InhibitGateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.InhibitGate");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLeftEventParserRuleCall_0_0 = (RuleCall)cLeftAssignment_0.eContents().get(0);
		private final Keyword cInhibitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightConditionalEventParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//InhibitGate returns Tree:
		//    left = Event 'inhibit' right = ConditionalEvent
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//left = Event 'inhibit' right = ConditionalEvent
		public Group getGroup() { return cGroup; }
		
		//left = Event
		public Assignment getLeftAssignment_0() { return cLeftAssignment_0; }
		
		//Event
		public RuleCall getLeftEventParserRuleCall_0_0() { return cLeftEventParserRuleCall_0_0; }
		
		//'inhibit'
		public Keyword getInhibitKeyword_1() { return cInhibitKeyword_1; }
		
		//right = ConditionalEvent
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//ConditionalEvent
		public RuleCall getRightConditionalEventParserRuleCall_2_0() { return cRightConditionalEventParserRuleCall_2_0; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.Event");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicEventParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExternalEventParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cConditionalEventParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIntermediateEventParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Event returns Tree:
		//    BasicEvent | ExternalEvent | ConditionalEvent | IntermediateEvent
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//BasicEvent | ExternalEvent | ConditionalEvent | IntermediateEvent
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BasicEvent
		public RuleCall getBasicEventParserRuleCall_0() { return cBasicEventParserRuleCall_0; }
		
		//ExternalEvent
		public RuleCall getExternalEventParserRuleCall_1() { return cExternalEventParserRuleCall_1; }
		
		//ConditionalEvent
		public RuleCall getConditionalEventParserRuleCall_2() { return cConditionalEventParserRuleCall_2; }
		
		//IntermediateEvent
		public RuleCall getIntermediateEventParserRuleCall_3() { return cIntermediateEventParserRuleCall_3; }
	}
	public class IntermediateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.IntermediateEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIntermediateKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//IntermediateEvent: 'intermediate' name = ID;
		@Override public ParserRule getRule() { return rule; }
		
		//'intermediate' name = ID
		public Group getGroup() { return cGroup; }
		
		//'intermediate'
		public Keyword getIntermediateKeyword_0() { return cIntermediateKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class BasicEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.BasicEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//BasicEvent: 'basic' name = ID (description = STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'basic' name = ID (description = STRING)?
		public Group getGroup() { return cGroup; }
		
		//'basic'
		public Keyword getBasicKeyword_0() { return cBasicKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class ConditionalEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.ConditionalEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConditionalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//ConditionalEvent: 'conditional' name = ID (description = STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'conditional' name = ID (description = STRING)?
		public Group getGroup() { return cGroup; }
		
		//'conditional'
		public Keyword getConditionalKeyword_0() { return cConditionalKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	public class ExternalEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.osarenogae.fta.FaultTree.ExternalEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cDescriptionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_2_0 = (RuleCall)cDescriptionAssignment_2.eContents().get(0);
		
		//ExternalEvent: 'external' name = ID (description = STRING)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'external' name = ID (description = STRING)?
		public Group getGroup() { return cGroup; }
		
		//'external'
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }
		
		//name = ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//(description = STRING)?
		public Assignment getDescriptionAssignment_2() { return cDescriptionAssignment_2; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_2_0() { return cDescriptionSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final FaultTreeModelElements pFaultTreeModel;
	private final BeginElements pBegin;
	private final IntermediateEventDefinitionElements pIntermediateEventDefinition;
	private final TreeElements pTree;
	private final OrGateElements pOrGate;
	private final AndGateElements pAndGate;
	private final InhibitGateElements pInhibitGate;
	private final EventElements pEvent;
	private final IntermediateEventElements pIntermediateEvent;
	private final BasicEventElements pBasicEvent;
	private final ConditionalEventElements pConditionalEvent;
	private final ExternalEventElements pExternalEvent;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public FaultTreeGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pFaultTreeModel = new FaultTreeModelElements();
		this.pBegin = new BeginElements();
		this.pIntermediateEventDefinition = new IntermediateEventDefinitionElements();
		this.pTree = new TreeElements();
		this.pOrGate = new OrGateElements();
		this.pAndGate = new AndGateElements();
		this.pInhibitGate = new InhibitGateElements();
		this.pEvent = new EventElements();
		this.pIntermediateEvent = new IntermediateEventElements();
		this.pBasicEvent = new BasicEventElements();
		this.pConditionalEvent = new ConditionalEventElements();
		this.pExternalEvent = new ExternalEventElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osarenogae.fta.FaultTree".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//FaultTreeModel:
	//    faultTree += begin;
	public FaultTreeModelElements getFaultTreeModelAccess() {
		return pFaultTreeModel;
	}
	
	public ParserRule getFaultTreeModelRule() {
		return getFaultTreeModelAccess().getRule();
	}
	
	// begin:
	//     (IntermediateEventDefinition)? 'root' fault += Tree
	//;
	public BeginElements getBeginAccess() {
		return pBegin;
	}
	
	public ParserRule getBeginRule() {
		return getBeginAccess().getRule();
	}
	
	//IntermediateEventDefinition:
	//    name = [IntermediateEvent] (description = STRING)? '=' value = Tree
	//;
	public IntermediateEventDefinitionElements getIntermediateEventDefinitionAccess() {
		return pIntermediateEventDefinition;
	}
	
	public ParserRule getIntermediateEventDefinitionRule() {
		return getIntermediateEventDefinitionAccess().getRule();
	}
	
	//Tree: Event | OrGate | AndGate | InhibitGate;
	public TreeElements getTreeAccess() {
		return pTree;
	}
	
	public ParserRule getTreeRule() {
		return getTreeAccess().getRule();
	}
	
	//OrGate returns Tree:
	//    left = AndGate 'or' right = AndGate
	//;
	public OrGateElements getOrGateAccess() {
		return pOrGate;
	}
	
	public ParserRule getOrGateRule() {
		return getOrGateAccess().getRule();
	}
	
	//AndGate returns Tree:
	//    left = InhibitGate 'and' right = InhibitGate
	//;
	public AndGateElements getAndGateAccess() {
		return pAndGate;
	}
	
	public ParserRule getAndGateRule() {
		return getAndGateAccess().getRule();
	}
	
	//InhibitGate returns Tree:
	//    left = Event 'inhibit' right = ConditionalEvent
	//;
	public InhibitGateElements getInhibitGateAccess() {
		return pInhibitGate;
	}
	
	public ParserRule getInhibitGateRule() {
		return getInhibitGateAccess().getRule();
	}
	
	//Event returns Tree:
	//    BasicEvent | ExternalEvent | ConditionalEvent | IntermediateEvent
	//;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//IntermediateEvent: 'intermediate' name = ID;
	public IntermediateEventElements getIntermediateEventAccess() {
		return pIntermediateEvent;
	}
	
	public ParserRule getIntermediateEventRule() {
		return getIntermediateEventAccess().getRule();
	}
	
	//BasicEvent: 'basic' name = ID (description = STRING)?;
	public BasicEventElements getBasicEventAccess() {
		return pBasicEvent;
	}
	
	public ParserRule getBasicEventRule() {
		return getBasicEventAccess().getRule();
	}
	
	//ConditionalEvent: 'conditional' name = ID (description = STRING)?;
	public ConditionalEventElements getConditionalEventAccess() {
		return pConditionalEvent;
	}
	
	public ParserRule getConditionalEventRule() {
		return getConditionalEventAccess().getRule();
	}
	
	//ExternalEvent: 'external' name = ID (description = STRING)?;
	public ExternalEventElements getExternalEventAccess() {
		return pExternalEvent;
	}
	
	public ParserRule getExternalEventRule() {
		return getExternalEventAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
