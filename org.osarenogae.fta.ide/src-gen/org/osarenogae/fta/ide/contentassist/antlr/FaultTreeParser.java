/*
 * generated by Xtext 2.25.0
 */
package org.osarenogae.fta.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.osarenogae.fta.ide.contentassist.antlr.internal.InternalFaultTreeParser;
import org.osarenogae.fta.services.FaultTreeGrammarAccess;

public class FaultTreeParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(FaultTreeGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, FaultTreeGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTreeAccess().getAlternatives(), "rule__Tree__Alternatives");
			builder.put(grammarAccess.getEventAccess().getAlternatives(), "rule__Event__Alternatives");
			builder.put(grammarAccess.getBeginAccess().getGroup(), "rule__Begin__Group__0");
			builder.put(grammarAccess.getIntermediateEventDefinitionAccess().getGroup(), "rule__IntermediateEventDefinition__Group__0");
			builder.put(grammarAccess.getOrGateAccess().getGroup(), "rule__OrGate__Group__0");
			builder.put(grammarAccess.getAndGateAccess().getGroup(), "rule__AndGate__Group__0");
			builder.put(grammarAccess.getInhibitGateAccess().getGroup(), "rule__InhibitGate__Group__0");
			builder.put(grammarAccess.getIntermediateEventAccess().getGroup(), "rule__IntermediateEvent__Group__0");
			builder.put(grammarAccess.getBasicEventAccess().getGroup(), "rule__BasicEvent__Group__0");
			builder.put(grammarAccess.getConditionalEventAccess().getGroup(), "rule__ConditionalEvent__Group__0");
			builder.put(grammarAccess.getExternalEventAccess().getGroup(), "rule__ExternalEvent__Group__0");
			builder.put(grammarAccess.getFaultTreeModelAccess().getFaultTreeAssignment(), "rule__FaultTreeModel__FaultTreeAssignment");
			builder.put(grammarAccess.getBeginAccess().getFaultAssignment_2(), "rule__Begin__FaultAssignment_2");
			builder.put(grammarAccess.getIntermediateEventDefinitionAccess().getNameAssignment_0(), "rule__IntermediateEventDefinition__NameAssignment_0");
			builder.put(grammarAccess.getIntermediateEventDefinitionAccess().getDescriptionAssignment_1(), "rule__IntermediateEventDefinition__DescriptionAssignment_1");
			builder.put(grammarAccess.getIntermediateEventDefinitionAccess().getValueAssignment_3(), "rule__IntermediateEventDefinition__ValueAssignment_3");
			builder.put(grammarAccess.getOrGateAccess().getLeftAssignment_0(), "rule__OrGate__LeftAssignment_0");
			builder.put(grammarAccess.getOrGateAccess().getRightAssignment_2(), "rule__OrGate__RightAssignment_2");
			builder.put(grammarAccess.getAndGateAccess().getLeftAssignment_0(), "rule__AndGate__LeftAssignment_0");
			builder.put(grammarAccess.getAndGateAccess().getRightAssignment_2(), "rule__AndGate__RightAssignment_2");
			builder.put(grammarAccess.getInhibitGateAccess().getLeftAssignment_0(), "rule__InhibitGate__LeftAssignment_0");
			builder.put(grammarAccess.getInhibitGateAccess().getRightAssignment_2(), "rule__InhibitGate__RightAssignment_2");
			builder.put(grammarAccess.getIntermediateEventAccess().getNameAssignment_1(), "rule__IntermediateEvent__NameAssignment_1");
			builder.put(grammarAccess.getBasicEventAccess().getNameAssignment_1(), "rule__BasicEvent__NameAssignment_1");
			builder.put(grammarAccess.getBasicEventAccess().getDescriptionAssignment_2(), "rule__BasicEvent__DescriptionAssignment_2");
			builder.put(grammarAccess.getConditionalEventAccess().getNameAssignment_1(), "rule__ConditionalEvent__NameAssignment_1");
			builder.put(grammarAccess.getConditionalEventAccess().getDescriptionAssignment_2(), "rule__ConditionalEvent__DescriptionAssignment_2");
			builder.put(grammarAccess.getExternalEventAccess().getNameAssignment_1(), "rule__ExternalEvent__NameAssignment_1");
			builder.put(grammarAccess.getExternalEventAccess().getDescriptionAssignment_2(), "rule__ExternalEvent__DescriptionAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private FaultTreeGrammarAccess grammarAccess;

	@Override
	protected InternalFaultTreeParser createParser() {
		InternalFaultTreeParser result = new InternalFaultTreeParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public FaultTreeGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(FaultTreeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
