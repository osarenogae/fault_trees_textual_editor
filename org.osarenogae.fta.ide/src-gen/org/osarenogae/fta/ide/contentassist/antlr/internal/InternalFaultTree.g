/*
 * generated by Xtext 2.25.0
 */
grammar InternalFaultTree;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.osarenogae.fta.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.osarenogae.fta.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.osarenogae.fta.services.FaultTreeGrammarAccess;

}
@parser::members {
	private FaultTreeGrammarAccess grammarAccess;

	public void setGrammarAccess(FaultTreeGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFaultTreeModel
entryRuleFaultTreeModel
:
{ before(grammarAccess.getFaultTreeModelRule()); }
	 ruleFaultTreeModel
{ after(grammarAccess.getFaultTreeModelRule()); } 
	 EOF 
;

// Rule FaultTreeModel
ruleFaultTreeModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFaultTreeModelAccess().getFaultTreeAssignment()); }
		(rule__FaultTreeModel__FaultTreeAssignment)
		{ after(grammarAccess.getFaultTreeModelAccess().getFaultTreeAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulebegin
entryRulebegin
:
{ before(grammarAccess.getBeginRule()); }
	 rulebegin
{ after(grammarAccess.getBeginRule()); } 
	 EOF 
;

// Rule begin
rulebegin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBeginAccess().getGroup()); }
		(rule__Begin__Group__0)
		{ after(grammarAccess.getBeginAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntermediateEventDefinition
entryRuleIntermediateEventDefinition
:
{ before(grammarAccess.getIntermediateEventDefinitionRule()); }
	 ruleIntermediateEventDefinition
{ after(grammarAccess.getIntermediateEventDefinitionRule()); } 
	 EOF 
;

// Rule IntermediateEventDefinition
ruleIntermediateEventDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntermediateEventDefinitionAccess().getGroup()); }
		(rule__IntermediateEventDefinition__Group__0)
		{ after(grammarAccess.getIntermediateEventDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTree
entryRuleTree
:
{ before(grammarAccess.getTreeRule()); }
	 ruleTree
{ after(grammarAccess.getTreeRule()); } 
	 EOF 
;

// Rule Tree
ruleTree 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTreeAccess().getAlternatives()); }
		(rule__Tree__Alternatives)
		{ after(grammarAccess.getTreeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOrGate
entryRuleOrGate
:
{ before(grammarAccess.getOrGateRule()); }
	 ruleOrGate
{ after(grammarAccess.getOrGateRule()); } 
	 EOF 
;

// Rule OrGate
ruleOrGate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOrGateAccess().getGroup()); }
		(rule__OrGate__Group__0)
		{ after(grammarAccess.getOrGateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndGate
entryRuleAndGate
:
{ before(grammarAccess.getAndGateRule()); }
	 ruleAndGate
{ after(grammarAccess.getAndGateRule()); } 
	 EOF 
;

// Rule AndGate
ruleAndGate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndGateAccess().getGroup()); }
		(rule__AndGate__Group__0)
		{ after(grammarAccess.getAndGateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInhibitGate
entryRuleInhibitGate
:
{ before(grammarAccess.getInhibitGateRule()); }
	 ruleInhibitGate
{ after(grammarAccess.getInhibitGateRule()); } 
	 EOF 
;

// Rule InhibitGate
ruleInhibitGate 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInhibitGateAccess().getGroup()); }
		(rule__InhibitGate__Group__0)
		{ after(grammarAccess.getInhibitGateAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEvent
entryRuleEvent
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEventAccess().getAlternatives()); }
		(rule__Event__Alternatives)
		{ after(grammarAccess.getEventAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntermediateEvent
entryRuleIntermediateEvent
:
{ before(grammarAccess.getIntermediateEventRule()); }
	 ruleIntermediateEvent
{ after(grammarAccess.getIntermediateEventRule()); } 
	 EOF 
;

// Rule IntermediateEvent
ruleIntermediateEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntermediateEventAccess().getGroup()); }
		(rule__IntermediateEvent__Group__0)
		{ after(grammarAccess.getIntermediateEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBasicEvent
entryRuleBasicEvent
:
{ before(grammarAccess.getBasicEventRule()); }
	 ruleBasicEvent
{ after(grammarAccess.getBasicEventRule()); } 
	 EOF 
;

// Rule BasicEvent
ruleBasicEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBasicEventAccess().getGroup()); }
		(rule__BasicEvent__Group__0)
		{ after(grammarAccess.getBasicEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalEvent
entryRuleConditionalEvent
:
{ before(grammarAccess.getConditionalEventRule()); }
	 ruleConditionalEvent
{ after(grammarAccess.getConditionalEventRule()); } 
	 EOF 
;

// Rule ConditionalEvent
ruleConditionalEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalEventAccess().getGroup()); }
		(rule__ConditionalEvent__Group__0)
		{ after(grammarAccess.getConditionalEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternalEvent
entryRuleExternalEvent
:
{ before(grammarAccess.getExternalEventRule()); }
	 ruleExternalEvent
{ after(grammarAccess.getExternalEventRule()); } 
	 EOF 
;

// Rule ExternalEvent
ruleExternalEvent 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalEventAccess().getGroup()); }
		(rule__ExternalEvent__Group__0)
		{ after(grammarAccess.getExternalEventAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tree__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTreeAccess().getEventParserRuleCall_0()); }
		ruleEvent
		{ after(grammarAccess.getTreeAccess().getEventParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getTreeAccess().getOrGateParserRuleCall_1()); }
		ruleOrGate
		{ after(grammarAccess.getTreeAccess().getOrGateParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getTreeAccess().getAndGateParserRuleCall_2()); }
		ruleAndGate
		{ after(grammarAccess.getTreeAccess().getAndGateParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getTreeAccess().getInhibitGateParserRuleCall_3()); }
		ruleInhibitGate
		{ after(grammarAccess.getTreeAccess().getInhibitGateParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Event__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEventAccess().getBasicEventParserRuleCall_0()); }
		ruleBasicEvent
		{ after(grammarAccess.getEventAccess().getBasicEventParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getExternalEventParserRuleCall_1()); }
		ruleExternalEvent
		{ after(grammarAccess.getEventAccess().getExternalEventParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getConditionalEventParserRuleCall_2()); }
		ruleConditionalEvent
		{ after(grammarAccess.getEventAccess().getConditionalEventParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getEventAccess().getIntermediateEventParserRuleCall_3()); }
		ruleIntermediateEvent
		{ after(grammarAccess.getEventAccess().getIntermediateEventParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__0__Impl
	rule__Begin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getIntermediateEventDefinitionParserRuleCall_0()); }
	(ruleIntermediateEventDefinition)?
	{ after(grammarAccess.getBeginAccess().getIntermediateEventDefinitionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__1__Impl
	rule__Begin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getRootKeyword_1()); }
	'root'
	{ after(grammarAccess.getBeginAccess().getRootKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Begin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBeginAccess().getFaultAssignment_2()); }
	(rule__Begin__FaultAssignment_2)
	{ after(grammarAccess.getBeginAccess().getFaultAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntermediateEventDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEventDefinition__Group__0__Impl
	rule__IntermediateEventDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventDefinitionAccess().getNameAssignment_0()); }
	(rule__IntermediateEventDefinition__NameAssignment_0)
	{ after(grammarAccess.getIntermediateEventDefinitionAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEventDefinition__Group__1__Impl
	rule__IntermediateEventDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventDefinitionAccess().getDescriptionAssignment_1()); }
	(rule__IntermediateEventDefinition__DescriptionAssignment_1)?
	{ after(grammarAccess.getIntermediateEventDefinitionAccess().getDescriptionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEventDefinition__Group__2__Impl
	rule__IntermediateEventDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventDefinitionAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getIntermediateEventDefinitionAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEventDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventDefinitionAccess().getValueAssignment_3()); }
	(rule__IntermediateEventDefinition__ValueAssignment_3)
	{ after(grammarAccess.getIntermediateEventDefinitionAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__OrGate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrGate__Group__0__Impl
	rule__OrGate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrGateAccess().getLeftAssignment_0()); }
	(rule__OrGate__LeftAssignment_0)
	{ after(grammarAccess.getOrGateAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrGate__Group__1__Impl
	rule__OrGate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrGateAccess().getOrKeyword_1()); }
	'or'
	{ after(grammarAccess.getOrGateAccess().getOrKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__OrGate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOrGateAccess().getRightAssignment_2()); }
	(rule__OrGate__RightAssignment_2)
	{ after(grammarAccess.getOrGateAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndGate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndGate__Group__0__Impl
	rule__AndGate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndGateAccess().getLeftAssignment_0()); }
	(rule__AndGate__LeftAssignment_0)
	{ after(grammarAccess.getAndGateAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndGate__Group__1__Impl
	rule__AndGate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndGateAccess().getAndKeyword_1()); }
	'and'
	{ after(grammarAccess.getAndGateAccess().getAndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndGate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndGateAccess().getRightAssignment_2()); }
	(rule__AndGate__RightAssignment_2)
	{ after(grammarAccess.getAndGateAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__InhibitGate__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InhibitGate__Group__0__Impl
	rule__InhibitGate__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInhibitGateAccess().getLeftAssignment_0()); }
	(rule__InhibitGate__LeftAssignment_0)
	{ after(grammarAccess.getInhibitGateAccess().getLeftAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InhibitGate__Group__1__Impl
	rule__InhibitGate__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInhibitGateAccess().getInhibitKeyword_1()); }
	'inhibit'
	{ after(grammarAccess.getInhibitGateAccess().getInhibitKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__InhibitGate__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInhibitGateAccess().getRightAssignment_2()); }
	(rule__InhibitGate__RightAssignment_2)
	{ after(grammarAccess.getInhibitGateAccess().getRightAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__IntermediateEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEvent__Group__0__Impl
	rule__IntermediateEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventAccess().getIntermediateKeyword_0()); }
	'intermediate'
	{ after(grammarAccess.getIntermediateEventAccess().getIntermediateKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__IntermediateEvent__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntermediateEventAccess().getNameAssignment_1()); }
	(rule__IntermediateEvent__NameAssignment_1)
	{ after(grammarAccess.getIntermediateEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BasicEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicEvent__Group__0__Impl
	rule__BasicEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicEventAccess().getBasicKeyword_0()); }
	'basic'
	{ after(grammarAccess.getBasicEventAccess().getBasicKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicEvent__Group__1__Impl
	rule__BasicEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicEventAccess().getNameAssignment_1()); }
	(rule__BasicEvent__NameAssignment_1)
	{ after(grammarAccess.getBasicEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BasicEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBasicEventAccess().getDescriptionAssignment_2()); }
	(rule__BasicEvent__DescriptionAssignment_2)?
	{ after(grammarAccess.getBasicEventAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ConditionalEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalEvent__Group__0__Impl
	rule__ConditionalEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalEventAccess().getConditionalKeyword_0()); }
	'conditional'
	{ after(grammarAccess.getConditionalEventAccess().getConditionalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalEvent__Group__1__Impl
	rule__ConditionalEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalEventAccess().getNameAssignment_1()); }
	(rule__ConditionalEvent__NameAssignment_1)
	{ after(grammarAccess.getConditionalEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ConditionalEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalEventAccess().getDescriptionAssignment_2()); }
	(rule__ConditionalEvent__DescriptionAssignment_2)?
	{ after(grammarAccess.getConditionalEventAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExternalEvent__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalEvent__Group__0__Impl
	rule__ExternalEvent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalEventAccess().getExternalKeyword_0()); }
	'external'
	{ after(grammarAccess.getExternalEventAccess().getExternalKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalEvent__Group__1__Impl
	rule__ExternalEvent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalEventAccess().getNameAssignment_1()); }
	(rule__ExternalEvent__NameAssignment_1)
	{ after(grammarAccess.getExternalEventAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExternalEvent__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalEventAccess().getDescriptionAssignment_2()); }
	(rule__ExternalEvent__DescriptionAssignment_2)?
	{ after(grammarAccess.getExternalEventAccess().getDescriptionAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__FaultTreeModel__FaultTreeAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFaultTreeModelAccess().getFaultTreeBeginParserRuleCall_0()); }
		rulebegin
		{ after(grammarAccess.getFaultTreeModelAccess().getFaultTreeBeginParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Begin__FaultAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBeginAccess().getFaultTreeParserRuleCall_2_0()); }
		ruleTree
		{ after(grammarAccess.getBeginAccess().getFaultTreeParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntermediateEventDefinitionAccess().getNameIntermediateEventCrossReference_0_0()); }
		(
			{ before(grammarAccess.getIntermediateEventDefinitionAccess().getNameIntermediateEventIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntermediateEventDefinitionAccess().getNameIntermediateEventIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getIntermediateEventDefinitionAccess().getNameIntermediateEventCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__DescriptionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntermediateEventDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getIntermediateEventDefinitionAccess().getDescriptionSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEventDefinition__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntermediateEventDefinitionAccess().getValueTreeParserRuleCall_3_0()); }
		ruleTree
		{ after(grammarAccess.getIntermediateEventDefinitionAccess().getValueTreeParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrGateAccess().getLeftAndGateParserRuleCall_0_0()); }
		ruleAndGate
		{ after(grammarAccess.getOrGateAccess().getLeftAndGateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__OrGate__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOrGateAccess().getRightAndGateParserRuleCall_2_0()); }
		ruleAndGate
		{ after(grammarAccess.getOrGateAccess().getRightAndGateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndGateAccess().getLeftInhibitGateParserRuleCall_0_0()); }
		ruleInhibitGate
		{ after(grammarAccess.getAndGateAccess().getLeftInhibitGateParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndGate__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndGateAccess().getRightInhibitGateParserRuleCall_2_0()); }
		ruleInhibitGate
		{ after(grammarAccess.getAndGateAccess().getRightInhibitGateParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__LeftAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInhibitGateAccess().getLeftEventParserRuleCall_0_0()); }
		ruleEvent
		{ after(grammarAccess.getInhibitGateAccess().getLeftEventParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__InhibitGate__RightAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInhibitGateAccess().getRightConditionalEventParserRuleCall_2_0()); }
		ruleConditionalEvent
		{ after(grammarAccess.getInhibitGateAccess().getRightConditionalEventParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntermediateEvent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntermediateEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getIntermediateEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getBasicEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BasicEvent__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBasicEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getBasicEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConditionalEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalEvent__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getConditionalEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalEventAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getExternalEventAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExternalEvent__DescriptionAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getExternalEventAccess().getDescriptionSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
